SMS - Hi, my name is Shanna.
JCL
DLN

====== product intro ============

SMS - We're here to introduce you to Dream Dash, which is a single-player continuous runner game for people of all ages on multiple platforms - web, android, and ios.

====== game vision ==============

SMS - Let me tell you about our vision for Dream Dash. Imagine that you're in a dream, trying to wake up. You will forever be in this dream if the ghosts catch you. Only the alarm clocks can wake you up. You must let the candles guide the way. With that vision in mind, ____ (Jazz or DL) will take you through the game itself.

===== game demo ================================

JCL - play game

DLN - create illusion of ghosts coming towards you
	- background scrolls
	- avoid ghosts that come at you from all angles
	- collect clocks to get to the next level, could pop up anywhere
	- collect candles if you get hit by a ghost (ghosts take away your candle)
	- when hit, character flashes to signify temporary invincibility
	- get points for collecting candles and clocks
	- when the game ends, you can add yourself to the top 5 on leaderboard

====================================================================

JCL - tech stack
	- phaser
	- cocoon
	- ajax
	- node/express
	- postgres
	- gulp

DLN - testing
	- emulators, user testing

==== challenges/tasks =====================================

DLN - challenges/tasks
	- persisting scores throughout level change
	- accessing database from within game
	- reporting final score with a username



JCL - challenges/tasks
	- mobile deployment/testing
	- asset management
	- state transitions
	- responsive design - web/mobile
	- gulp/build tools/git integration



SMS - challenges/tasks
	- arcade physics/sprite movement
	- arcade physics/collision detection
	- accouting for different screen/game sizes
	- debugging within the game

SMS - Some of the challenges I encountered while building Dream Dash included sprite movement, collision detection, and accounting for different screen and game sizes. We were able to program the characters to move using physics-like qualities with help from a physics engine, but it was still tricky to create the illusion of perspective. Ultimately, we were able to accomplish this by using a combination of physics and tweening, which is a way of programming the 'in-between' motion of a character to give it the illusion of being in motion. Programming the collision detection, which is involved whenever the player collides or overlaps with another character, was also tricky to make precise enough so that it was conducive to a good user experience. In Dream Dash, we used what is called the 'box model', which means that each character has an invisible box around it or within it, which is what the collision detection listens for. Finally, since our goal was to make Dream Dash widely available, we had to figure out the most efficient way to make our game playable on a variety of screen sizes, which turns out is much trickier than just enabling full screen.


======= closing/credits ==================
JCL - roll credits

SMS - That is an introduction to Dream Dash. Check us out in the app store, google play store, and online at playdreamdash.com. Thank you for listening, and we welcome any questions you have.








Presentation Notes - not part of actual presentation
=================================================================

project tasks -
	compiling
	asset management
	scoring
	music
	fonts
	user flow
	collisions
	collecting items
	sprite physics
	phaser debugging
	pausing
	gulp
	deploying to app/play stores
	fonts

challenges -
	this
	compiling
	bounding boxes
	music
	state management
	templates
	lives
	persisting total score
	invinsibility
	sizing
	fonts
	minifying
	gulp

additional -
	animation
	inputs

	stateful game logic
	cross platform integration/compatibility
	incorporate credits